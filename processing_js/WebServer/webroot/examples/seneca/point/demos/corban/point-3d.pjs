PVector loc;
PVector g = new PVector(0, 0.5);
ArrayList balls;

int d = 10;

class Ball {
  int index;
  PVector loc = new PVector();
  PVector vel = new PVector();
  PVector acc = new PVector();
  float bounceAcc;
  
  Ball(int index, float x, float y, float z) {
    this.index = index;
    loc.x = x;
    loc.y = y;
    loc.z = z;
  }
  
  void render() {
    if ( this.vel.y >= (height - d/2 - this.loc.y) ) {
      bounceAcc = this.vel.y;
      this.vel.y = height - d/2 - this.loc.y;
    } else {
      this.addAcc(g);
    }

    this.loc.add(this.vel);

    stroke(round((float)(Math.sin(frameCount/30f) + 1) * 128), round((float)(Math.cos(frameCount/40f) + 1) * 128) + index, round((float)(Math.cos(frameCount/30f) + 1) * 128) + index/2);

    if ( this.loc.y >= height - d/2 ) {
      this.vel = new PVector();
      this.addAcc(new PVector(0, -bounceAcc));
    }
  }
  
  void addAcc(PVector v) {
    this.acc.add(v);
    this.vel.add(this.acc);
    this.acc = new PVector();
  }
}

Ball ball;

int ballTotal = 25;

float thetaInc = TWO_PI / ballTotal;
float t = 0f;
float x = 0f;
float z = 0f;

float radius;

void setup() {
  size(600, 400, OPENGL);

  stroke(255);

  balls = new ArrayList();
  smooth();
  
  radius = width;
}

void draw() {
  background(0);
  camera(0, 0, 1200, 0, 0, 0, 0, 1, 0);
  
  if ( frameCount % 2 == 0 && balls.size() < ballTotal * 5 ) {
    x = radius * (float) Math.cos(t);
    z = radius * (float) Math.sin(t);
    t += thetaInc;
    
    radius -= 2;
    
    balls.add(new Ball(balls.size()+1, x, -300, z));
  }

  for ( int i = balls.size()-1; i >= 0; i-- ) {
    Ball ball = (Ball) balls.get(i);
    
    point(ball.loc.x, ball.loc.y, ball.loc.z);
    ball.render();
  } 
}
